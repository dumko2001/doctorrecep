'use client'

import { useState, useActionState } from 'react'
import { Check, X, Edit, RotateCcw, Ban, CheckCircle, Clock, AlertTriangle, FileText } from 'lucide-react'
import { DoctorWithStats, FormState } from '@/lib/types'
import { performAdminAction, resetDoctorQuota } from '@/lib/actions/admin'
import { formatDate } from '@/lib/utils'
import { TemplateEditModal } from './template-edit-modal'
import { ConfirmationDialog } from '../ui/confirmation-dialog'

const initialFormState: FormState = {
  success: false,
  message: '',
}

interface DoctorsTableProps {
  doctors: DoctorWithStats[]
}

export function DoctorsTable({ doctors }: DoctorsTableProps) {
  const [loading, setLoading] = useState<string | null>(null)
  const [message, setMessage] = useState<{ type: 'success' | 'error'; text: string } | null>(null)
  const [showTemplateModal, setShowTemplateModal] = useState(false)
  const [selectedDoctor, setSelectedDoctor] = useState<DoctorWithStats | null>(null)
  const [actionFormData, setActionFormData] = useState<{
    action: string
    doctorId: string
    quota?: number
  } | null>(null)
  const [actionState, actionFormAction, isActionPending] = useActionState(
    async (state: FormState, formData: FormData) => {
      const action = formData.get('action') as string
      const doctorId = formData.get('doctorId') as string
      const quota = formData.get('quota') ? Number(formData.get('quota')) : undefined

      const result = await performAdminAction({
        action: action as any,
        doctor_id: doctorId,
        data: quota ? { quota } : undefined,
      })

      if (result.success) {
        setTimeout(() => window.location.reload(), 1000)
        return { success: true, message: 'Action completed successfully!' }
      } else {
        if (result.error?.includes('authenticated') || result.error?.includes('log in')) {
          setTimeout(() => window.location.href = '/admin/login', 2000)
          return { success: false, message: 'Session expired. Redirecting to login...' }
        }
        return { success: false, message: result.error || 'Action failed' }
      }
    },
    initialFormState
  )

  const [resetState, resetFormAction, isResetPending] = useActionState(
    async (state: FormState, formData: FormData) => {
      const doctorId = formData.get('doctorId') as string
      const result = await resetDoctorQuota(doctorId)

      if (result.success) {
        setTimeout(() => window.location.reload(), 1000)
        return { success: true, message: 'Quota reset successfully!' }
      } else {
        if (result.error?.includes('authenticated') || result.error?.includes('log in')) {
          setTimeout(() => window.location.href = '/admin/login', 2000)
          return { success: false, message: 'Session expired. Redirecting to login...' }
        }
        return { success: false, message: result.error || 'Failed to reset quota' }
      }
    },
    initialFormState
  )

  const [confirmationDialog, setConfirmationDialog] = useState<{
    isOpen: boolean
    title: string
    message: string
    onConfirm: () => void
    type?: 'warning' | 'danger' | 'info'
  }>({
    isOpen: false,
    title: '',
    message: '',
    onConfirm: () => {},
    type: 'warning'
  })
</edits>

<edits>

<old_text>
  const handleAction = async (
    action: 'approve' | 'reject' | 'update_quota' | 'disable' | 'enable',
    doctorId: string,
    data?: { quota?: number; reason?: string }
  ) => {
    setLoading(doctorId)
    setMessage(null)

    try {
      const result = await performAdminAction({
        action,
        doctor_id: doctorId,
        data: {
          quota: data?.quota !== undefined ? data.quota : 0,
          ...(data?.reason !== undefined ? { reason: data.reason } : {})
        },
      })

      if (result.success) {
        setMessage({ type: 'success', text: `Action completed successfully` })
        // Refresh the page to show updated data
        window.location.reload()
      } else {
        // Handle authentication errors by redirecting to login
        if (result.error?.includes('authenticated') || result.error?.includes('log in')) {
          setMessage({ type: 'error', text: 'Session expired. Redirecting to login...' })
          setTimeout(() => {
            window.location.href = '/admin/login'
          }, 2000)
        } else {
          setMessage({ type: 'error', text: result.error || 'Action failed' })
        }
      }
    } catch {
      setMessage({ type: 'error', text: 'An unexpected error occurred' })
    } finally {
      setLoading(null)
      setTimeout(() => setMessage(null), 3000)
    }
  }



  const handleQuotaUpdate = async (doctorId: string) => {
    const newQuota = prompt('Enter new monthly quota:')
    if (!newQuota || isNaN(Number(newQuota))) return

    setConfirmationDialog({
      isOpen: true,
      title: 'Update Quota',
      message: `Are you sure you want to update the monthly quota to ${newQuota}?`,
      type: 'info',
      onConfirm: () => {
        handleAction('update_quota', doctorId, { quota: Number(newQuota) })
        setConfirmationDialog(prev => ({ ...prev, isOpen: false }))
      }
    })
  }

  const handleRejectDoctor = (doctorId: string) => {
    setConfirmationDialog({
      isOpen: true,
      title: 'Reject Doctor',
      message: 'Are you sure you want to reject this doctor? This action will permanently delete their account.',
      type: 'danger',
      onConfirm: () => {
        handleAction('reject', doctorId)
        setConfirmationDialog(prev => ({ ...prev, isOpen: false }))
      }
    })
  }

  const handleDisableDoctor = (doctorId: string) => {
    setConfirmationDialog({
      isOpen: true,
      title: 'Disable Doctor',
      message: 'Are you sure you want to disable this doctor? They will not be able to log in until re-enabled.',
      type: 'warning',
      onConfirm: () => {
        handleAction('disable', doctorId)
        setConfirmationDialog(prev => ({ ...prev, isOpen: false }))
      }
    })
  }

  const handleQuotaReset = async (doctorId: string) => {
    setConfirmationDialog({
      isOpen: true,
      title: 'Reset Quota',
      message: 'Are you sure you want to reset this doctor\'s quota usage to zero?',
      type: 'warning',
      onConfirm: () => {
        handleQuotaResetConfirmed(doctorId)
        setConfirmationDialog(prev => ({ ...prev, isOpen: false }))
      }
    })
  }

  const handleQuotaResetConfirmed = async (doctorId: string) => {
    setLoading(doctorId)
    setMessage(null)

    try {
      const result = await resetDoctorQuota(doctorId)

      if (result.success) {
        setMessage({ type: 'success', text: 'Quota reset successfully' })
        window.location.reload()
      } else {
        // Handle authentication errors by redirecting to login
        if (result.error?.includes('authenticated') || result.error?.includes('log in')) {
          setMessage({ type: 'error', text: 'Session expired. Redirecting to login...' })
          setTimeout(() => {
            window.location.href = '/admin/login'
          }, 2000)
        } else {
          setMessage({ type: 'error', text: result.error || 'Failed to reset quota' })
        }
      }
    } catch {
      setMessage({ type: 'error', text: 'An unexpected error occurred' })
    } finally {
      setLoading(null)
      setTimeout(() => setMessage(null), 3000)
    }
  }

  const handleAction = async (
    action: 'approve' | 'reject' | 'update_quota' | 'disable' | 'enable',
    doctorId: string,
    data?: { quota?: number; reason?: string }
  ) => {
    setLoading(doctorId)
    setMessage(null)

    try {
      const result = await performAdminAction({
        action,
        doctor_id: doctorId,
        data: {
          quota: data?.quota !== undefined ? data.quota : 0,
          ...(data?.reason !== undefined ? { reason: data.reason } : {})
        },
      })

      if (result.success) {
        setMessage({ type: 'success', text: `Action completed successfully` })
        // Refresh the page to show updated data
        window.location.reload()
      } else {
        // Handle authentication errors by redirecting to login
        if (result.error?.includes('authenticated') || result.error?.includes('log in')) {
          setMessage({ type: 'error', text: 'Session expired. Redirecting to login...' })
          setTimeout(() => {
            window.location.href = '/admin/login'
          }, 2000)
        } else {
          setMessage({ type: 'error', text: result.error || 'Action failed' })
        }
      }
    } catch {
      setMessage({ type: 'error', text: 'An unexpected error occurred' })
    } finally {
      setLoading(null)
      setTimeout(() => setMessage(null), 3000)
    }
  }



  const handleQuotaUpdate = async (doctorId: string) => {
    const newQuota = prompt('Enter new monthly quota:')
    if (!newQuota || isNaN(Number(newQuota))) return

    setConfirmationDialog({
      isOpen: true,
      title: 'Update Quota',
      message: `Are you sure you want to update the monthly quota to ${newQuota}?`,
      type: 'info',
      onConfirm: () => {
        handleAction('update_quota', doctorId, { quota: Number(newQuota) })
        setConfirmationDialog(prev => ({ ...prev, isOpen: false }))
      }
    })
  }

  const handleRejectDoctor = (doctorId: string) => {
    setConfirmationDialog({
      isOpen: true,
      title: 'Reject Doctor',
      message: 'Are you sure you want to reject this doctor? This action will permanently delete their account.',
      type: 'danger',
      onConfirm: () => {
        handleAction('reject', doctorId)
        setConfirmationDialog(prev => ({ ...prev, isOpen: false }))
      }
    })
  }

  const handleDisableDoctor = (doctorId: string) => {
    setConfirmationDialog({
      isOpen: true,
      title: 'Disable Doctor',
      message: 'Are you sure you want to disable this doctor? They will not be able to log in until re-enabled.',
      type: 'warning',
      onConfirm: () => {
        handleAction('disable', doctorId)
        setConfirmationDialog(prev => ({ ...prev, isOpen: false }))
      }
    })
  }

  const handleQuotaReset = async (doctorId: string) => {
    setConfirmationDialog({
      isOpen: true,
      title: 'Reset Quota',
      message: 'Are you sure you want to reset this doctor\'s quota usage to zero?',
      type: 'warning',
      onConfirm: () => {
        handleQuotaResetConfirmed(doctorId)
        setConfirmationDialog(prev => ({ ...prev, isOpen: false }))
      }
    })
  }

  const handleQuotaResetConfirmed = async (doctorId: string) => {
    setLoading(doctorId)
    setMessage(null)

    try {
      const result = await resetDoctorQuota(doctorId)

      if (result.success) {
        setMessage({ type: 'success', text: 'Quota reset successfully' })
        window.location.reload()
      } else {
        // Handle authentication errors by redirecting to login
        if (result.error?.includes('authenticated') || result.error?.includes('log in')) {
          setMessage({ type: 'error', text: 'Session expired. Redirecting to login...' })
          setTimeout(() => {
            window.location.href = '/admin/login'
          }, 2000)
        } else {
          setMessage({ type: 'error', text: result.error || 'Failed to reset quota' })
        }
      }
    } catch {
      setMessage({ type: 'error', text: 'An unexpected error occurred' })
    } finally {
      setLoading(null)
      setTimeout(() => setMessage(null), 3000)
    }
  }

  const handleTemplateEdit = (doctor: DoctorWithStats) => {
    setSelectedDoctor(doctor)
    setShowTemplateModal(true)
  }

  const getStatusBadge = (doctor: DoctorWithStats) => {
    if (!doctor.approved) {
      return (
        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
          <Clock className="w-3 h-3 mr-1" />
          Pending
        </span>
      )
    }
    return (
      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
        <CheckCircle className="w-3 h-3 mr-1" />
        Approved
      </span>
    )
  }

  const getQuotaBadge = (doctor: DoctorWithStats) => {
    if (doctor.quota_percentage >= 90) {
      return (
        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
          <AlertTriangle className="w-3 h-3 mr-1" />
          {doctor.quota_percentage}%
        </span>
      )
    } else if (doctor.quota_percentage >= 70) {
      return (
        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
          {doctor.quota_percentage}%
        </span>
      )
    }
    return (
      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
        {doctor.quota_percentage}%
      </span>
    )
  }

  const currentMessage = actionState.message || resetState.message || message
  const isPending = isActionPending || isResetPending || loading !== null

  return (
    <div className="overflow-hidden">
      {/* Hidden forms for server actions */}
      <form id="admin-action-form" action={actionFormAction} className="hidden">
        <input name="action" type="hidden" />
        <input name="doctorId" type="hidden" />
        <input name="quota" type="hidden" />
      </form>
      
      <form id="reset-quota-form" action={resetFormAction} className="hidden">
        <input name="doctorId" type="hidden" />
      </form>

      {currentMessage && (
        <div className={`p-4 mb-4 rounded-md ${
          actionState.success || resetState.success ? 'bg-green-50 text-green-800' : 'bg-red-50 text-red-800'
        }`}>
          {currentMessage}
        </div>
      )}
</edits>

<edits>

<old_text>
                    {!doctor.approved ? (
                      <>
                        <button
                          onClick={() => handleAction('approve', doctor.id)}
                          disabled={loading === doctor.id}
                          className="text-green-600 hover:text-green-900 disabled:opacity-50"
                          title="Approve Doctor"
                        >
                          <Check className="w-4 h-4" />
                        </button>
                        <button
                          onClick={() => handleRejectDoctor(doctor.id)}
                          disabled={loading === doctor.id}
                          className="text-red-600 hover:text-red-900 disabled:opacity-50"
                          title="Reject Doctor"
                        >
                          <X className="w-4 h-4" />
                        </button>
                      </>
                    ) : (
                      <>
                        <button
                          onClick={() => handleQuotaUpdate(doctor.id)}
                          disabled={loading === doctor.id}
                          className="text-blue-600 hover:text-blue-900 disabled:opacity-50"
                          title="Update Quota"
                        >
                          <Edit className="w-4 h-4" />
                        </button>
                        <button
                          onClick={() => handleQuotaReset(doctor.id)}
                          disabled={loading === doctor.id}
                          className="text-purple-600 hover:text-purple-900 disabled:opacity-50"
                          title="Reset Quota"
                        >
                          <RotateCcw className="w-4 h-4" />
                        </button>
                        <button
                          onClick={() => handleTemplateEdit(doctor)}
                          disabled={loading === doctor.id}
                          className="text-green-600 hover:text-green-900 disabled:opacity-50"
                          title="Edit Template"
                        >
                          <FileText className="w-4 h-4" />
                        </button>
                        <button
                          onClick={() => handleDisableDoctor(doctor.id)}
                          disabled={loading === doctor.id}
                          className="text-red-600 hover:text-red-900 disabled:opacity-50"
                          title="Disable Doctor"
                        >
                          <Ban className="w-4 h-4" />
                        </button>
                      </>
                    )}

      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Doctor
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Status
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Quota Usage
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Activity
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {doctors.map((doctor) => (
              <tr key={doctor.id} className="hover:bg-gray-50">
                <td className="px-6 py-4 whitespace-nowrap">
                  <div>
                    <div className="text-sm font-medium text-gray-900">
                      {doctor.name}
                    </div>
                    <div className="text-sm text-gray-500">
                      {doctor.email}
                    </div>
                    {doctor.clinic_name ? (
                      <div className="text-xs text-gray-400">{doctor.clinic_name}</div>
                    ) : null}
                    {doctor.phone ? (
                      <div className="text-xs text-gray-400">{doctor.phone}</div>
                    ) : null}
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  {getStatusBadge(doctor)}
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-900">
                    {doctor.quota_used} / {doctor.monthly_quota}
                  </div>
                  {getQuotaBadge(doctor)}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  <div>
                    {doctor.total_consultations} consultations
                  </div>
                  <div>
                    {doctor.this_month_generations} AI generations
                  </div>
                  {doctor.last_activity && (
                    <div className="text-xs">
                      Last: {formatDate(doctor.last_activity)}
                    </div>
                  )}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                  <div className="flex space-x-2">
                    {!doctor.approved ? (
                      <>
                        <button
                          onClick={() => handleAction('approve', doctor.id)}
                          disabled={loading === doctor.id}
                          className="text-green-600 hover:text-green-900 disabled:opacity-50"
                          title="Approve Doctor"
                        >
                          <Check className="w-4 h-4" />
                        </button>
                        <button
                          onClick={() => handleRejectDoctor(doctor.id)}
                          disabled={loading === doctor.id}
                          className="text-red-600 hover:text-red-900 disabled:opacity-50"
                          title="Reject Doctor"
                        >
                          <X className="w-4 h-4" />
                        </button>
                      </>
                    ) : (
                      <>
                        <button
                          onClick={() => handleQuotaUpdate(doctor.id)}
                          disabled={loading === doctor.id}
                          className="text-blue-600 hover:text-blue-900 disabled:opacity-50"
                          title="Update Quota"
                        >
                          <Edit className="w-4 h-4" />
                        </button>
                        <button
                          onClick={() => handleQuotaReset(doctor.id)}
                          disabled={loading === doctor.id}
                          className="text-purple-600 hover:text-purple-900 disabled:opacity-50"
                          title="Reset Quota"
                        >
                          <RotateCcw className="w-4 h-4" />
                        </button>
                        <button
                          onClick={() => handleTemplateEdit(doctor)}
                          disabled={loading === doctor.id}
                          className="text-green-600 hover:text-green-900 disabled:opacity-50"
                          title="Edit Template"
                        >
                          <FileText className="w-4 h-4" />
                        </button>
                        <button
                          onClick={() => handleDisableDoctor(doctor.id)}
                          disabled={loading === doctor.id}
                          className="text-red-600 hover:text-red-900 disabled:opacity-50"
                          title="Disable Doctor"
                        >
                          <Ban className="w-4 h-4" />
                        </button>
                      </>
                    )}
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {doctors.length === 0 && (
        <div className="text-center py-12">
          <h3 className="mt-2 text-sm font-medium text-gray-900">No doctors found</h3>
          <p className="mt-1 text-sm text-gray-500">
            No doctors have signed up yet.
          </p>
        </div>
      )}

      {/* Template Edit Modal */}
      <TemplateEditModal
        isOpen={showTemplateModal}
        onClose={() => {
          setShowTemplateModal(false)
          setSelectedDoctor(null)
        }}
        doctor={selectedDoctor}
      />

      {/* Confirmation Dialog */}
      <ConfirmationDialog
        isOpen={confirmationDialog.isOpen}
        onClose={() => setConfirmationDialog(prev => ({ ...prev, isOpen: false }))}
        onConfirm={confirmationDialog.onConfirm}
        title={confirmationDialog.title}
        message={confirmationDialog.message}
        type={confirmationDialog.type}
        isLoading={isPending}
      /></edits>

</edits>
    </div>
  )
}
